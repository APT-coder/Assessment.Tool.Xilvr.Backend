// <auto-generated />
using System;
using System.Collections.Generic;
using Assessment.Tool.Xilvr.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Assessment.Tool.Xilvr.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250406062507_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("xilvr")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Aggregates.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BatchIds")
                        .HasColumnType("jsonb")
                        .HasColumnName("batch_ids");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Designation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("designation");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("employee", "xilvr");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("assessment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("assessment_name");

                    b.Property<int>("TotalMarks")
                        .HasColumnType("integer")
                        .HasColumnName("total_marks");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("assessment", "xilvr");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("batch_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("batch_name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("batch", "xilvr");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<List<string>>("Answer")
                        .HasColumnType("jsonb")
                        .HasColumnName("answer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.PrimitiveCollection<List<string>>("Options")
                        .HasColumnType("jsonb")
                        .HasColumnName("question_options");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("question_points");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer")
                        .HasColumnName("question_type");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("question_text");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("question", "xilvr");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsInternalPermission")
                        .HasColumnType("boolean")
                        .HasColumnName("is_internal_permission");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("permission_name");

                    b.Property<int?>("PermissionGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_group_id");

                    b.Property<string>("PermissionKey")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("permission_key");

                    b.HasKey("Id");

                    b.HasIndex("PermissionGroupId");

                    b.ToTable("permission", "xilvr");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("permission_group_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("permission_group_name");

                    b.HasKey("Id");

                    b.ToTable("permission_group", "xilvr");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDefaultRole")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default_role");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system_role");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("role_name");

                    b.Property<string>("RoleInternalName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("role_internal_name");

                    b.HasKey("Id");

                    b.ToTable("role", "xilvr");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_permission_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_permission", "xilvr");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_role", "xilvr");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.ScheduledAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("scheduled_assessment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("AssessmentDuration")
                        .HasColumnType("interval")
                        .HasColumnName("assessment_duration");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("integer")
                        .HasColumnName("assessment_id");

                    b.Property<int>("AssessmentStatus")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("BatchId")
                        .HasColumnType("integer")
                        .HasColumnName("batch_id");

                    b.Property<bool>("CanDisplayResult")
                        .HasColumnType("boolean")
                        .HasColumnName("can_display_result");

                    b.Property<bool>("CanRandomizeQuestion")
                        .HasColumnType("boolean")
                        .HasColumnName("can_randomize");

                    b.Property<bool>("CanSubmitBeforeEnd")
                        .HasColumnType("boolean")
                        .HasColumnName("can_submit_before_end");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Link")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("link");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("BatchId");

                    b.ToTable("scheduled_assessment", "xilvr");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.ScheduledAssessmentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("scheduled_assessment_answer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("answer");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int>("ScheduledAssessmentId")
                        .HasColumnType("integer")
                        .HasColumnName("scheduled_assessment_id");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ScheduledAssessmentId");

                    b.ToTable("scheduled_assessment_answer", "xilvr");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.ScheduledAssessmentScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("scheduled_assessment_score_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<int>("ScheduledAssessmentId")
                        .HasColumnType("integer")
                        .HasColumnName("scheduled_assessment_id");

                    b.Property<double>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("total_score");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ScheduledAssessmentId");

                    b.ToTable("scheduled_assessment_score", "xilvr");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.SharedKernel.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("LasttPasswordReset")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_reset_on");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("profile_image_url");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<short>("UserStatusId")
                        .HasColumnType("smallint")
                        .HasColumnName("user_status_id");

                    b.Property<Guid>("UuId")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.HasKey("Id");

                    b.HasIndex("UserStatusId");

                    b.ToTable("user", "xilvr");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.SharedKernel.UserStatus", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("user_status_id");

                    b.Property<bool>("IsActive")
                        .HasMaxLength(15)
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("user_status", "xilvr");
                });

            modelBuilder.Entity("AssessmentQuestion", b =>
                {
                    b.Property<int>("AssessmentId")
                        .HasColumnType("integer")
                        .HasColumnName("assessment_id");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.HasKey("AssessmentId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("assessment_question", "xilvr");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Aggregates.Employee", b =>
                {
                    b.HasOne("Assessment.Tool.Xilvr.Domain.SharedKernel.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.Permission", b =>
                {
                    b.HasOne("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.PermissionGroup", "PermissionGroup")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionGroupId");

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.RolePermission", b =>
                {
                    b.HasOne("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.UserRole", b =>
                {
                    b.HasOne("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment.Tool.Xilvr.Domain.SharedKernel.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.ScheduledAssessment", b =>
                {
                    b.HasOne("Assessment.Tool.Xilvr.Domain.Entities.Assessment", "Assessment")
                        .WithMany("ScheduledAssessments")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment.Tool.Xilvr.Domain.Entities.Batch", "Batch")
                        .WithMany("ScheduledAssessments")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.ScheduledAssessmentAnswer", b =>
                {
                    b.HasOne("Assessment.Tool.Xilvr.Domain.Aggregates.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment.Tool.Xilvr.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment.Tool.Xilvr.Domain.Entities.ScheduledAssessment", "ScheduledAssessment")
                        .WithMany()
                        .HasForeignKey("ScheduledAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Question");

                    b.Navigation("ScheduledAssessment");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.ScheduledAssessmentScore", b =>
                {
                    b.HasOne("Assessment.Tool.Xilvr.Domain.Aggregates.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment.Tool.Xilvr.Domain.Entities.ScheduledAssessment", "ScheduledAssessment")
                        .WithMany()
                        .HasForeignKey("ScheduledAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ScheduledAssessment");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.SharedKernel.User", b =>
                {
                    b.HasOne("Assessment.Tool.Xilvr.Domain.SharedKernel.UserStatus", "UserStatus")
                        .WithMany()
                        .HasForeignKey("UserStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Assessment.Tool.Xilvr.Domain.SharedKernel.Email", "Email", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("EmailId")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("email");

                            b1.HasKey("UserId");

                            b1.ToTable("user", "xilvr");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("AssessmentQuestion", b =>
                {
                    b.HasOne("Assessment.Tool.Xilvr.Domain.Entities.Assessment", null)
                        .WithMany()
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment.Tool.Xilvr.Domain.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.Assessment", b =>
                {
                    b.Navigation("ScheduledAssessments");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.Batch", b =>
                {
                    b.Navigation("ScheduledAssessments");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.PermissionGroup", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.Entities.RolesAndPermissions.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Assessment.Tool.Xilvr.Domain.SharedKernel.User", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
